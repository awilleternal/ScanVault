import { useState, useEffect } from 'react';

/**
 * Component for displaying vulnerabilities as they're discovered in real-time
 * @param {Object} props
 * @param {Array} props.discoveredVulnerabilities - Array of vulnerabilities found so far
 * @param {Object} props.latestVulnerability - The most recently discovered vulnerability
 * @returns {JSX.Element}
 */
function LiveVulnerabilityFeed({ discoveredVulnerabilities, latestVulnerability }) {
  const [animatingVuln, setAnimatingVuln] = useState(null);

  // Animate new vulnerabilities as they arrive
  useEffect(() => {
    if (latestVulnerability) {
      setAnimatingVuln(latestVulnerability.id);
      const timer = setTimeout(() => {
        setAnimatingVuln(null);
      }, 2000);
      return () => clearTimeout(timer);
    }
  }, [latestVulnerability]);

  // Severity configuration
  const severityConfig = {
    CRITICAL: {
      color: 'text-red-800',
      bg: 'bg-red-50',
      border: 'border-red-200',
      icon: '🚨',
      pulse: 'animate-pulse',
    },
    HIGH: {
      color: 'text-orange-800',
      bg: 'bg-orange-50',
      border: 'border-orange-200',
      icon: '⚠️',
      pulse: 'animate-pulse',
    },
    MEDIUM: {
      color: 'text-yellow-800',
      bg: 'bg-yellow-50',
      border: 'border-yellow-200',
      icon: '⚡',
      pulse: 'animate-pulse',
    },
    LOW: {
      color: 'text-blue-800',
      bg: 'bg-blue-50',
      border: 'border-blue-200',
      icon: 'ℹ️',
      pulse: 'animate-pulse',
    },
    INFO: {
      color: 'text-gray-800',
      bg: 'bg-gray-50',
      border: 'border-gray-200',
      icon: '💡',
      pulse: 'animate-pulse',
    },
  };

  // Tool configuration
  const toolConfig = {
    'Semgrep': {
      accent: 'border-blue-500',
      bgAccent: 'bg-blue-50',
      icon: '🔍',
      label: 'Code Analysis'
    },
    'Trivy': {
      accent: 'border-green-500',
      bgAccent: 'bg-green-50',
      icon: '📦',
      label: 'Dependency Scan'
    },
    'OWASP Dependency Check': {
      accent: 'border-purple-500',
      bgAccent: 'bg-purple-50',
      icon: '🛡️',
      label: 'Dependency Check'
    }
  };

  // Group vulnerabilities by severity for stats
  const severityStats = discoveredVulnerabilities.reduce((acc, vuln) => {
    const severity = vuln.severity || 'INFO';
    acc[severity] = (acc[severity] || 0) + 1;
    return acc;
  }, {});

  const totalVulns = discoveredVulnerabilities.length;

  return (
    <div className="space-y-4">
      {/* Live Statistics */}
      <div className="card">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold text-gray-900">
            Live Vulnerability Discovery
          </h3>
          <div className="flex items-center space-x-2">
            <div className="w-3 h-3 bg-red-500 rounded-full animate-pulse"></div>
            <span className="text-sm text-gray-600">Live</span>
          </div>
        </div>

        {/* Real-time stats */}
        <div className="grid grid-cols-2 md:grid-cols-6 gap-4">
          <div className="text-center">
            <p className="text-2xl font-bold text-gray-900">{totalVulns}</p>
            <p className="text-xs text-gray-600">Found</p>
          </div>
          {Object.entries(severityConfig).map(([severity, config]) => (
            <div key={severity} className="text-center">
              <p className={`text-2xl font-bold ${config.color}`}>
                {severityStats[severity] || 0}
              </p>
              <p className="text-xs text-gray-600">{severity}</p>
            </div>
          ))}
        </div>
      </div>

      {/* Live Feed */}
      <div className="card">
        <h4 className="text-base font-medium text-gray-900 mb-4">
          Vulnerability Feed
        </h4>
        
        {totalVulns === 0 ? (
          <div className="text-center py-8">
            <div className="w-12 h-12 mx-auto mb-4 border-4 border-gray-300 border-t-primary-600 rounded-full animate-spin"></div>
            <p className="text-gray-500">Scanning for vulnerabilities...</p>
          </div>
        ) : (
          <div className="max-h-96 overflow-y-auto space-y-3">
            {discoveredVulnerabilities.slice().reverse().map((vuln) => {
              const config = severityConfig[vuln.severity] || severityConfig.INFO;
              const currentToolConfig = toolConfig[vuln.tool] || {
                accent: 'border-gray-500',
                bgAccent: 'bg-gray-50',
                icon: '🔧',
                label: 'Security Tool'
              };
              
              const isAnimating = animatingVuln === vuln.id;
              
              return (
                <div
                  key={vuln.id}
                  className={`p-4 rounded-lg border-l-4 ${config.border} ${config.bg} transition-all duration-500 ${
                    isAnimating ? 'scale-105 shadow-lg ring-2 ring-primary-200' : 'scale-100'
                  }`}
                >
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-2">
                        <span className="text-lg">{config.icon}</span>
                        <span className={`font-semibold text-sm ${config.color}`}>
                          {vuln.severity}
                        </span>
                        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${currentToolConfig.bgAccent} ${currentToolConfig.accent.replace('border-', 'text-')}`}>
                          <span className="mr-1">{currentToolConfig.icon}</span>
                          {vuln.tool}
                        </span>
                        {isAnimating && (
                          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 animate-pulse">
                            ✨ New
                          </span>
                        )}
                      </div>
                      <h5 className="font-medium text-gray-900 text-sm">
                        {vuln.type}
                      </h5>
                      <p className="text-xs text-gray-600 mt-1">
                        {vuln.file}:{vuln.line}
                      </p>
                      <p className="text-xs text-gray-700 mt-2 line-clamp-2">
                        {vuln.description}
                      </p>
                    </div>
                    <div className="text-xs text-gray-400 ml-4">
                      {new Date().toLocaleTimeString()}
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </div>
    </div>
  );
}

export default LiveVulnerabilityFeed;
